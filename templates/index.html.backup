<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sortyx Recyclable Waste Classifier - Cloud Edition</title>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;600;700;800&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
                         <div class="bin-levels">
                        <div class="bin-item recyclable-bin" id="recyclableBin" style="border-color: #27ae60;">
                            <div class="bin-icon">ðŸŸ¢</div>
                            <div class="bin-name">Recyclable</div>
                            <div class="bin-level" id="greenLevel">35%</div>
                            <div class="bin-confidence" id="recyclableConfidence" style="display: none;">Confidence: --</div>
                        </div>
                        <div class="bin-item non-recyclable-bin" id="nonRecyclableBin" style="border-color: #2c3e50;">
                            <div class="bin-icon">âš«</div>
                            <div class="bin-name">Non-Recyclable</div>
                            <div class="bin-level" id="blackLevel">68%</div>
                            <div class="bin-confidence" id="nonRecyclableConfidence" style="display: none;">Confidence: --</div>
                        </div>
                    </div>    body {
            font-family: 'Montserrat', sans-serif;
            background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
            color: #333;
            overflow-x: hidden;
        }

        .container {
            max-width: 100vw;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            padding: 15px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            backdrop-filter: blur(10px);
            box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
            z-index: 1000;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .logo img {
            width: 50px;
            height: 50px;
            border-radius: 10px;
        }

        .logo h1 {
            color: #11998e;
            font-weight: 800;
            font-size: 24px;
        }

        .classification-toggle {
            background: rgba(255, 255, 255, 0.95);
            padding: 10px 20px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            gap: 15px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .toggle-label {
            font-weight: 600;
            color: #666;
            font-size: 14px;
        }

        .toggle-switch {
            position: relative;
            width: 60px;
            height: 30px;
            background: #ccc;
            border-radius: 15px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .toggle-switch.active {
            background: #11998e;
        }

        .toggle-slider {
            position: absolute;
            top: 3px;
            left: 3px;
            width: 24px;
            height: 24px;
            background: white;
            border-radius: 50%;
            transition: all 0.3s;
        }

        .toggle-switch.active .toggle-slider {
            transform: translateX(30px);
        }

        .toggle-mode-text {
            font-weight: 700;
            color: #11998e;
            font-size: 14px;
        }

        .datetime {
            color: #666;
            font-weight: 600;
        }

        .main-content {
            flex: 1;
            display: grid;
            grid-template-columns: 1fr 400px;
            gap: 20px;
            padding: 20px;
        }

        .camera-section {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 20px;
            display: flex;
            flex-direction: column;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .camera-container {
            position: relative;
            flex: 1;
            border-radius: 15px;
            overflow: hidden;
            background: #000;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 500px;
        }

        #videoElement {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .camera-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.3);
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .camera-overlay.show {
            opacity: 1;
        }

        .overlay-text {
            color: white;
            font-size: 24px;
            font-weight: 600;
            text-align: center;
            background: rgba(0, 0, 0, 0.7);
            padding: 20px 40px;
            border-radius: 15px;
        }

        .camera-controls {
            display: flex;
            gap: 15px;
            margin-top: 15px;
        }

        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 10px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: linear-gradient(45deg, #11998e, #38ef7d);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(17, 153, 142, 0.4);
        }

        .btn-secondary {
            background: #e74c3c;
            color: white;
        }

        .btn-secondary:hover {
            background: #c0392b;
            transform: translateY(-2px);
        }

        .sidebar {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .panel {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 20px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .panel-title {
            font-size: 18px;
            font-weight: 700;
            color: #185a9d;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .bin-levels {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        .bin-item {
            text-align: center;
            padding: 15px;
            border-radius: 15px;
            background: #f8f9fa;
            border: 2px solid transparent;
            transition: all 0.5s ease;
            position: relative;
        }

        .bin-item.highlighted {
            transform: scale(1.08);
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
            animation: pulse 1.5s ease-in-out infinite;
            z-index: 10;
        }

        .bin-item.highlighted.recyclable {
            background: linear-gradient(135deg, #27ae60, #2ecc71);
            border-color: #27ae60;
            color: white;
        }

        .bin-item.highlighted.non-recyclable {
            background: linear-gradient(135deg, #2c3e50, #34495e);
            border-color: #2c3e50;
            color: white;
        }

        @keyframes pulse {
            0%, 100% {
                box-shadow: 0 8px 30px rgba(39, 174, 96, 0.4);
            }
            50% {
                box-shadow: 0 8px 40px rgba(39, 174, 96, 0.7);
            }
        }

        .bin-item.highlighted.non-recyclable {
            animation: pulse-dark 1.5s ease-in-out infinite;
        }

        @keyframes pulse-dark {
            0%, 100% {
                box-shadow: 0 8px 30px rgba(44, 62, 80, 0.4);
            }
            50% {
                box-shadow: 0 8px 40px rgba(44, 62, 80, 0.7);
            }
        }

        .bin-confidence {
            margin-top: 8px;
            font-size: 14px;
            font-weight: 600;
            color: #666;
        }

        .bin-item.highlighted .bin-confidence {
            color: rgba(255, 255, 255, 0.9);
            font-size: 16px;
        }

        .bin-item.yellow { border-color: #f39c12; }
        .bin-item.red { border-color: #e74c3c; }
        .bin-item.blue { border-color: #3498db; }
        .bin-item.black { border-color: #2c3e50; }

        .bin-icon {
            font-size: 24px;
            margin-bottom: 8px;
        }

        .bin-name {
            font-weight: 600;
            font-size: 12px;
            margin-bottom: 5px;
        }

        .bin-level {
            font-size: 18px;
            font-weight: 700;
        }

        .classification-result {
            display: none;
            padding: 20px;
            border-radius: 15px;
            margin-top: 15px;
        }

        .classification-result.show {
            display: block;
            animation: slideIn 0.5s ease-out;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .result-item {
            background: #fff;
            padding: 15px;
            border-radius: 10px;
            margin: 10px 0;
            border-left: 5px solid #11998e;
        }

        .result-label {
            font-weight: 600;
            color: #666;
            font-size: 14px;
        }

        .result-value {
            font-size: 18px;
            font-weight: 700;
            margin-top: 5px;
        }

        .qr-code {
            text-align: center;
            margin: 20px 0;
        }

        .qr-code img {
            max-width: 150px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .status-indicator {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-top: 10px;
        }

        .status-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #e74c3c;
        }

        .status-dot.connected {
            background: #27ae60;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .loading.show {
            display: block;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #11998e;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .stats-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
        }

        .stat-item {
            background: #f8f9fa;
            padding: 10px;
            border-radius: 8px;
            text-align: center;
        }

        .stat-number {
            font-size: 20px;
            font-weight: 700;
            color: #11998e;
        }

        .stat-label {
            font-size: 12px;
            color: #666;
            margin-top: 2px;
        }

        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
            
            .bin-levels {
                grid-template-columns: 1fr 1fr 1fr 1fr;
            }
        }

        .celebration {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 9999;
        }

        .confetti {
            position: absolute;
            width: 10px;
            height: 10px;
            background: #f39c12;
            animation: fall 3s linear infinite;
        }

        @keyframes fall {
            0% {
                transform: translateY(-100vh) rotate(0deg);
                opacity: 1;
            }
            100% {
                transform: translateY(100vh) rotate(360deg);
                opacity: 0;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <div class="logo">
                <i class="fas fa-recycle" style="font-size: 30px; color: #11998e;"></i>
                <h1>Sortyx Recyclable Waste Classifier</h1>
            </div>
            <div class="classification-toggle">
                <span class="toggle-label">Classification Mode:</span>
                <div class="toggle-switch active" id="classificationToggle" onclick="toggleClassificationMethod()">
                    <div class="toggle-slider"></div>
                </div>
                <span class="toggle-mode-text" id="toggleModeText">AI Model</span>
            </div>
            <div class="datetime" id="datetime"></div>
        </header>

        <main class="main-content">
            <section class="camera-section">
                <div class="camera-container">
                    <video id="videoElement" autoplay muted playsinline></video>
                    <canvas id="captureCanvas" style="display: none;"></canvas>
                    <div class="camera-overlay" id="cameraOverlay">
                        <div class="overlay-text" id="overlayText">
                            Present medical waste item for classification
                        </div>
                    </div>
                </div>
                
                <div class="camera-controls">
                    <button class="btn btn-primary" id="classifyBtn">
                        <i class="fas fa-camera"></i>
                        Classify Waste
                    </button>
                    <button class="btn btn-secondary" id="stopBtn" style="display: none;">
                        <i class="fas fa-stop"></i>
                        Stop Camera
                    </button>
                </div>

                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <p id="loadingText">Analyzing recyclable waste...</p>
                </div>

                <div class="classification-result" id="classificationResult">
                    <div class="result-item">
                        <div class="result-label">Classification Method</div>
                        <div class="result-value" id="classificationMethod">-</div>
                    </div>
                    <div class="result-item">
                        <div class="result-label">Item Classification</div>
                        <div class="result-value" id="itemName">-</div>
                    </div>
                    <div class="result-item">
                        <div class="result-label">Disposal Bin</div>
                        <div class="result-value" id="binColor">-</div>
                    </div>
                    <div class="result-item">
                        <div class="result-label">Confidence</div>
                        <div class="result-value" id="confidence">-</div>
                    </div>
                    <div class="result-item">
                        <div class="result-label">Explanation</div>
                        <div class="result-value" id="explanation">-</div>
                    </div>
                    <div class="qr-code">
                        <img id="qrCodeImg" src="" alt="QR Code" style="display: none;">
                        <p style="font-size: 12px; color: #666; margin-top: 10px;">Scan for disposal tracking</p>
                    </div>
                </div>
            </section>

            <aside class="sidebar">
                <div class="panel">
                    <h3 class="panel-title">
                        <i class="fas fa-trash-alt"></i>
                        Bin Levels
                    </h3>
                    <div class="bin-levels">
                        <div class="bin-item" style="border-color: #27ae60;">
                            <div class="bin-icon">ï¿½</div>
                            <div class="bin-name">Recyclable</div>
                            <div class="bin-level" id="greenLevel">35%</div>
                        </div>
                        <div class="bin-item" style="border-color: #2c3e50;">
                            <div class="bin-icon">âš«</div>
                            <div class="bin-name">Non-Recyclable</div>
                            <div class="bin-level" id="blackLevel">68%</div>
                        </div>
                    </div>
                </div>

                <div class="panel">
                    <h3 class="panel-title">
                        <i class="fas fa-chart-bar"></i>
                        Today's Stats
                    </h3>
                    <div class="stats-grid">
                        <div class="stat-item">
                            <div class="stat-number" id="totalItems">0</div>
                            <div class="stat-label">Total Items</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-number" id="recyclableItems">0</div>
                            <div class="stat-label">Recyclable</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-number" id="nonRecyclableItems">0</div>
                            <div class="stat-label">Non-Recyclable</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-number" id="modelCount">0</div>
                            <div class="stat-label">Model Used</div>
                        </div>
                    </div>
                </div>

                <div class="panel">
                    <h3 class="panel-title">
                        <i class="fas fa-wifi"></i>
                        System Status
                    </h3>
                    <div class="status-indicator">
                        <div class="status-dot" id="statusDot"></div>
                        <span id="statusText">Connecting...</span>
                    </div>
                </div>
            </aside>
        </main>
    </div>

    <div class="celebration" id="celebration"></div>

    <script>
        // Global variables
        let videoElement, canvas, context;
        let isClassifying = false;
        let websocket = null;
        let classificationMethod = 'model'; // 'model' or 'llm'
        let stats = {
            total: 0,
            'Recyclable': 0,
            'Non-Recyclable': 0,
            model_count: 0,
            llm_count: 0
        };

        // Toggle classification method
        function toggleClassificationMethod() {
            const toggle = document.getElementById('classificationToggle');
            const modeText = document.getElementById('toggleModeText');
            
            if (classificationMethod === 'model') {
                classificationMethod = 'llm';
                toggle.classList.remove('active');
                modeText.textContent = 'LLM (Gemini AI)';
            } else {
                classificationMethod = 'model';
                toggle.classList.add('active');
                modeText.textContent = 'AI Model';
            }
            
            console.log('Classification method changed to:', classificationMethod);
        }

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            initializeElements();
            initializeCamera();
            initializeWebSocket();
            updateDateTime();
            setInterval(updateDateTime, 1000);
            loadStats();
            loadBinLevels();
        });

        function initializeElements() {
            videoElement = document.getElementById('videoElement');
            canvas = document.getElementById('captureCanvas');
            context = canvas.getContext('2d');
            
            document.getElementById('classifyBtn').addEventListener('click', classifyWaste);
            document.getElementById('stopBtn').addEventListener('click', stopCamera);
        }

        async function initializeCamera() {
            try {
                const constraints = {
                    video: {
                        width: { ideal: 1280 },
                        height: { ideal: 720 },
                        facingMode: 'environment'
                    }
                };

                const stream = await navigator.mediaDevices.getUserMedia(constraints);
                videoElement.srcObject = stream;
                
                videoElement.onloadedmetadata = () => {
                    canvas.width = videoElement.videoWidth;
                    canvas.height = videoElement.videoHeight;
                };

                updateStatus(true, 'Camera Ready');
                showOverlay('Camera ready - Present recyclable waste item');

            } catch (error) {
                console.error('Camera initialization failed:', error);
                updateStatus(false, 'Camera Error');
                showOverlay('Camera access denied or not available');
            }
        }

        function initializeWebSocket() {
            try {
                const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                const wsUrl = `${protocol}//${window.location.host}/ws`;
                
                websocket = new WebSocket(wsUrl);
                
                websocket.onopen = () => {
                    console.log('WebSocket connected');
                    updateStatus(true, 'Connected');
                };
                
                websocket.onmessage = (event) => {
                    const data = JSON.parse(event.data);
                    handleWebSocketMessage(data);
                };
                
                websocket.onclose = () => {
                    console.log('WebSocket disconnected');
                    updateStatus(false, 'Disconnected');
                    // Attempt to reconnect after 3 seconds
                    setTimeout(initializeWebSocket, 3000);
                };
                
                websocket.onerror = (error) => {
                    console.error('WebSocket error:', error);
                    updateStatus(false, 'Connection Error');
                };
                
            } catch (error) {
                console.error('WebSocket initialization failed:', error);
                updateStatus(false, 'WebSocket Error');
            }
        }

        function handleWebSocketMessage(data) {
            switch (data.type) {
                case 'classification_complete':
                    displayClassificationResult(data.data);
                    break;
                case 'sensor_update':
                    updateBinLevel(data.data.sensor_id, data.data.bin_level);
                    break;
                default:
                    console.log('Unknown WebSocket message type:', data.type);
            }
        }

        async function classifyWaste() {
            if (isClassifying) return;
            
            isClassifying = true;
            showLoading(true);
            hideClassificationResult();
            
            const loadingMsg = classificationMethod === 'model' 
                ? 'Analyzing with AI model...' 
                : 'Analyzing with Gemini LLM...';
            document.getElementById('loadingText').textContent = loadingMsg;
            showOverlay(loadingMsg);
            
            try {
                // Capture frame from video
                context.drawImage(videoElement, 0, 0, canvas.width, canvas.height);
                const imageData = canvas.toDataURL('image/jpeg', 0.8);
                
                // Send to backend for classification with selected method
                const response = await fetch('/classify', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        image_base64: imageData,
                        location: 'main_facility',
                        classification_method: classificationMethod
                    })
                });
                
                if (!response.ok) {
                    throw new Error(`Classification failed: ${response.statusText}`);
                }
                
                const result = await response.json();
                displayClassificationResult(result);
                updateStats(result.classification, classificationMethod);
                showCelebration();
                
            } catch (error) {
                console.error('Classification error:', error);
                showError('Classification failed. Please try again.');
            } finally {
                isClassifying = false;
                showLoading(false);
                hideOverlay();
            }
        }

        function displayClassificationResult(result) {
            const methodText = classificationMethod === 'model' ? 'AI Model (YOLO)' : 'LLM (Gemini AI)';
            document.getElementById('classificationMethod').textContent = methodText;
            document.getElementById('itemName').textContent = result.item_name;
            document.getElementById('binColor').textContent = `${result.bin_color} Bin (${result.classification})`;
            document.getElementById('confidence').textContent = `${Math.round(result.confidence * 100)}%`;
            document.getElementById('explanation').textContent = result.explanation;
            
            // Highlight the correct bin with confidence
            highlightBin(result.classification, result.confidence);
            
            if (result.qr_code) {
                const qrImg = document.getElementById('qrCodeImg');
                qrImg.src = result.qr_code;
                qrImg.style.display = 'block';
            }
            
            const resultDiv = document.getElementById('classificationResult');
            resultDiv.style.background = getBinColor(result.classification);
            resultDiv.classList.add('show');
            
            // Auto-hide after 10 seconds
            setTimeout(() => {
                hideClassificationResult();
                removeHighlightBin();
            }, 10000);
        }

        function highlightBin(classification, confidence) {
            // Remove any existing highlights
            removeHighlightBin();
            
            const confidencePercent = Math.round(confidence * 100);
            
            if (classification === 'Recyclable') {
                const recyclableBin = document.getElementById('recyclableBin');
                const recyclableConf = document.getElementById('recyclableConfidence');
                
                recyclableBin.classList.add('highlighted', 'recyclable');
                recyclableConf.textContent = `Confidence: ${confidencePercent}%`;
                recyclableConf.style.display = 'block';
            } else {
                const nonRecyclableBin = document.getElementById('nonRecyclableBin');
                const nonRecyclableConf = document.getElementById('nonRecyclableConfidence');
                
                nonRecyclableBin.classList.add('highlighted', 'non-recyclable');
                nonRecyclableConf.textContent = `Confidence: ${confidencePercent}%`;
                nonRecyclableConf.style.display = 'block';
            }
        }

        function removeHighlightBin() {
            const recyclableBin = document.getElementById('recyclableBin');
            const nonRecyclableBin = document.getElementById('nonRecyclableBin');
            const recyclableConf = document.getElementById('recyclableConfidence');
            const nonRecyclableConf = document.getElementById('nonRecyclableConfidence');
            
            recyclableBin.classList.remove('highlighted', 'recyclable');
            nonRecyclableBin.classList.remove('highlighted', 'non-recyclable');
            recyclableConf.style.display = 'none';
            nonRecyclableConf.style.display = 'none';
        }

        function getBinColor(classification) {
            const colors = {
                'Recyclable': 'linear-gradient(45deg, #27ae60, #2ecc71)',
                'Non-Recyclable': 'linear-gradient(45deg, #2c3e50, #34495e)'
            };
            return colors[classification] || colors['Non-Recyclable'];
        }

        function updateStats(classification, method) {
            stats.total++;
            stats[classification]++;
            
            if (method === 'model') {
                stats.model_count++;
            } else {
                stats.llm_count++;
            }
            
            document.getElementById('totalItems').textContent = stats.total;
            document.getElementById('recyclableItems').textContent = stats['Recyclable'];
            document.getElementById('nonRecyclableItems').textContent = stats['Non-Recyclable'];
            document.getElementById('modelCount').textContent = stats.model_count;
        }

        function showCelebration() {
            const celebration = document.getElementById('celebration');
            celebration.innerHTML = '';
            
            for (let i = 0; i < 20; i++) {
                const confetti = document.createElement('div');
                confetti.className = 'confetti';
                confetti.style.left = Math.random() * 100 + '%';
                confetti.style.animationDelay = Math.random() * 2 + 's';
                confetti.style.backgroundColor = ['#27ae60', '#2ecc71', '#11998e', '#38ef7d'][Math.floor(Math.random() * 4)];
                celebration.appendChild(confetti);
            }
            
            setTimeout(() => {
                celebration.innerHTML = '';
            }, 3000);
        }

        function showLoading(show) {
            document.getElementById('loading').classList.toggle('show', show);
        }

        function hideClassificationResult() {
            document.getElementById('classificationResult').classList.remove('show');
            document.getElementById('qrCodeImg').style.display = 'none';
        }

        function showOverlay(text) {
            document.getElementById('overlayText').textContent = text;
            document.getElementById('cameraOverlay').classList.add('show');
        }

        function hideOverlay() {
            document.getElementById('cameraOverlay').classList.remove('show');
        }

        function showError(message) {
            showOverlay(`Error: ${message}`);
            setTimeout(hideOverlay, 3000);
        }

        function updateStatus(connected, text) {
            document.getElementById('statusDot').classList.toggle('connected', connected);
            document.getElementById('statusText').textContent = text;
        }

        function updateDateTime() {
            const now = new Date();
            const formatted = now.toLocaleDateString('en-GB') + ' ' + now.toLocaleTimeString('en-GB');
            document.getElementById('datetime').textContent = formatted;
        }

        async function loadStats() {
            try {
                const response = await fetch('/stats');
                const data = await response.json();
                
                stats.total = data.total_classifications;
                stats['Recyclable'] = data.category_breakdown['Recyclable'] || 0;
                stats['Non-Recyclable'] = data.category_breakdown['Non-Recyclable'] || 0;
                
                updateStats('', 'model'); // Update display without incrementing
            } catch (error) {
                console.error('Failed to load stats:', error);
            }
        }

        async function loadBinLevels() {
            try {
                const response = await fetch('/bins/status');
                const data = await response.json();
                
                data.bins.forEach(bin => {
                    const element = document.getElementById(bin.bin_id.replace('_bin', 'Level'));
                    if (element) {
                        element.textContent = `${bin.level}%`;
                    }
                });
            } catch (error) {
                console.error('Failed to load bin levels:', error);
            }
        }

        function updateBinLevel(sensorId, level) {
            const element = document.getElementById(sensorId.replace('_bin', 'Level'));
            if (element) {
                element.textContent = `${level}%`;
            }
        }

        function stopCamera() {
            if (videoElement.srcObject) {
                const stream = videoElement.srcObject;
                const tracks = stream.getTracks();
                tracks.forEach(track => track.stop());
                videoElement.srcObject = null;
            }
            updateStatus(false, 'Camera Stopped');
        }

        // Reload bin levels every 30 seconds
        setInterval(loadBinLevels, 30000);
    </script>
</body>
</html>